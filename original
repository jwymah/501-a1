import java.util.EmptyStackException;

public class A2Q3<T> implements BoundedStack<T>{
	private T[] stack;
	private int size = 0;
	private int capacity = 0;
	private int top = -1;
	
	@SuppressWarnings("unchecked")
	public	A2Q3 (int newCapacity){
		stack = (T[]) new String[newCapacity];
		capacity = newCapacity;
	}
	@Override
	public boolean isEmpty() {
		if (size == 0)
			return true;
		return false;
	}

	@Override
	public T top() throws EmptyStackException{
		if (isEmpty()){
			throw new EmptyStackException ();
		}
		T temp = stack[top];
		return temp;
	}

	@Override
	public T pop() throws EmptyStackException {
		if (isEmpty())
			throw new EmptyStackException ();
		T temp = stack[top];
		top--;
		size--;
		
		if	(Mode.debugStack==true)
			System.out.println("popped " + temp);
		return temp;
	}

	@Override
	public int size() {
		return size;
	}

	@Override
	public int capacity() {
		return capacity;
	}

	@Override
	public boolean isFull() {
		if (size == capacity)
			return true;
		return false;
	}

	@Override
	public void push(T x) throws FullStackException{
		if (isFull())
			throw new FullStackException("Stack is full. Cannot push anymore");
		top++;
		stack[top] = x;
		size++;
		
		if	(Mode.debugStack==true)
			System.out.println("pushed " + x);
		return;
	}
}
import java.util.EmptyStackException;
/*
 * Student: Jeremy Mah
 * ID: 10053908
 * Class: 331
 * assignment 2
 * Instructor: Mike Jacobson
 * TA: Eduard Pelchat
 * tut: M/W 11am
 */
public class A2Q4<T> implements BoundedStack<T>{
	private int size;
	private int capacity;
	private ListNode head;

	public A2Q4 (int newCapacity){
		capacity = newCapacity;
	}
	@Override
	public boolean isEmpty() {
		if (size == 0)
			return true;
		return false;
	}

	@SuppressWarnings("unchecked")
	@Override
	public T top() throws EmptyStackException{
		if (isEmpty())
				throw new EmptyStackException();
		String temp = head.getData();
		return (T) temp;
	}

	@SuppressWarnings("unchecked")
	@Override
	public T pop() throws EmptyStackException{
		if (size <= 0)
				throw new EmptyStackException();
		
		String temp = head.getData();
		if	(size == 1)
			head = null;
		else
			head = head.getNext();
		
		size--;
		if	(Mode.debugStack == true)
			System.out.println("popped: "+temp);
		return (T) temp;
	}

	@Override
	public int size() {
		return size;
	}

	@Override
	public int capacity() {
		return capacity;
	}

	@Override
	public boolean isFull() {
		if (size == capacity)
			return true;
		return false;
	}

	@Override
	public void push(T x) throws FullStackException{
		if (isFull())
			throw new FullStackException("Stack is full. Cannot push anymore");
		ListNode temp = new ListNode((String) x);
		temp.setNext(head);
		size++;
		if	(Mode.debugStack == true)
			System.out.println("pushed: "+x);
		head = temp;
	}

}
/*
 * Student: Jeremy Mah
 * ID: 10053908
 * Class: 331
 * assignment 2
 * Instructor: Mike Jacobson
 * TA: Eduard Pelchat
 * tut: M/W 11am
 */
public class A2Q5b {
	private  int capacity = 100;
	private  StringBuffer buf = new StringBuffer();
	private  boolean appendState = false;
	private  BoundedStack<String> stack;
	private  int depth = 0;
	
	/**
	 * handles any exceptions thrown by called methods
	 * @param 1 or 0 depending on type of stack implementation
	 * @param lisp expression
	 */
	/**
	 * method made solely for the purpose of having a return method that can be used to test
	 * @param type integer 0 or 1 for the implementation of the stack
	 * @param expression the lisp expression
	 * @return value of expression of type double
	 */
	public double startExpression(int type, String expression){
		double value = 0.0;
			
		if(expression.length() == 0){
			throw new InvalidExpressionException("Invalid Expression2");
		}
		if	(type == 0){
			stack = new A2Q3<String>(capacity);
		}
		else{
			stack = new A2Q4<String>(capacity);
		}
		
		for (int i = expression.length()-1; i >= 0; i--){	//all initial pushing is done inside parseInput
			parseInput(expression.charAt(i));
			if(Mode.debugStack==true)
				System.out.println("parsed character: " + expression.charAt(i));
		}
		if	(stack.pop().contentEquals("(")){
			depth = 0;
			value = evaluate();
		}
		else
				throw new InvalidExpressionException("Invalid Expression3");
		return value;
	}
	
/**
 * This method scans the string start to finish one character at a time.
 * if there is two number characters or negative sign next to a number character they are joined into a single string
 * values are pushed onto a stack which is implemented by an array of strings
 * @param a single character from the list expression
 * @throws InvalidExpressionException if unexpected characters found (ie alphabet) 
 */
	public void parseInput(char c){
		if	(Mode.debugStack==true)
			System.out.println("parsing: "+c);
		switch(c){
		case '(':
		case ')':
			if	(buf.length() > 0){
				buf.reverse();
				stack.push(buf.toString());
				buf.delete(0,buf.length());
			}
			stack.push(Character.toString(c));
			appendState = false;
			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			buf.append(c);
			appendState = true;
			break;
		case '-':
			if (appendState == true)
				buf.append(c);
			else
				stack.push(Character.toString(c));
			
			break;
		case '+':
		case '*':
		case '/':
			stack.push(Character.toString(c));
			appendState = false;
			break;
		case ' ':
			if	(buf.length() > 0){
				buf.reverse();
				stack.push(buf.toString());
				buf.delete(0, buf.length());
			}
			appendState = false;
			break;
		default:
			throw new InvalidExpressionException("Invalid Expression4");
		}
		return;
	}

/**
 * recursive evaluation method; called whenever opening bracket is popped
 * must be called after encountering an opening bracket and will evaluate the contents 
 * until the corresponding closing bracket given a valid equation
 * Will call itself again when encountering another opening bracket before a closing bracket.
 * @return returns a boolean value whether the expression is a valid Lisp expression.
 * @throws InvalidExpressionException if some expression is not entirely bound by a single pair of brackets. ie. '(+ 1 2)5'.
 * 		will always throw an exception if a close bracket is not on stack when returning to this method
 */
	public double evaluate(){
		depth += 1;
		String str=null;
		double value = 0.0;
		while (stack.size() > 1 && stack.top().contentEquals(")") == false){
			str = stack.pop();
			if	(str.contentEquals("(")){
				value = evaluate();
			}
			else if	(stack.size() > 0 && str.contentEquals(")") == false)
				value = doOperator(str);
		}
		if (stack.isEmpty() == true)
			throw new InvalidExpressionException("Invalid Expression4.5");
		stack.pop();
		if(Mode.debugEval)
			System.out.println("stack size= " +stack.size());
		if(depth == 1 && stack.isEmpty()==false)
			throw new InvalidExpressionException("Invalid Expression5");
		depth -= 1;
		return value;
	}

/**
 * Analyzes the operation to be performed and calls doOperands
 * @param one character long string containing the operator to perform
 * @return the value calculated from the operand until closing bracket is on top of stack
 **/	
	public double doOperator(String str){
		double value = 0.0;
		if (Mode.debugEval)
			System.out.println("String passed to doOperator is: "+str);
		if	(str.contentEquals("("))
			evaluate();
		
		else if	(str.contentEquals("+")){
			value = doOperands('+');
		}
		else if	(str.contentEquals("*")){
			value = doOperands('*');
		}
		else if (str.contentEquals("-")){
			value = doOperands('-');
		}
		else if (str.contentEquals("/")){
			value = doOperands('/');
		}
		else if (str.contentEquals(")")){
			return 0.0;
		}
		else{
			throw new InvalidExpressionException("Invalid Expression5.5");
		}
		return value;
	}
	
/**
 * given an operator, performs the operand with values pulled off the stack until closing bracket is on top.
 * Also keeps track of how many terms have gone by to properly evaluate lisp expressions.
 * @param char operator expected to be one of + - * /
 * @return (double) the value of the evaluated segment until a closing bracket is on top of the stack
 * @throws InvalidExpressionException if operator is - or / and closing bracket is on top of the stack
 * or if after being called another operator is on top of the stack 
 */
	public double doOperands(char operator){
		int terms = 0;
		double value = 0.0;
		while (stack.size() > 0){
			terms++;
			

			if (stack.top().contentEquals(")")){
				if	(terms==1 && operator=='*')
					value = 1.0;
				else if(terms==1 && (operator=='/' || operator=='-')){
					throw new InvalidExpressionException("Invalid Expression6");
				}
				if (Mode.debugEval)
					System.out.println("value at this point = "+value);
				return value;
			}
			
			String str = stack.pop();
			
			if	(str.contentEquals("("))
				str = Double.toString(evaluate());
			else if (str.contentEquals("+") || str.contentEquals("*") || str.contentEquals("-") || str.contentEquals("/")){
				throw new InvalidExpressionException("Invalid Expression");
			}
			
			switch(operator){
			case '+':
				if (terms == 1)
					value = 0.0;
				value += Double.parseDouble(str);
				break;
			case '*':
				if (terms == 1)
					value = 1.0;
				value *= Double.parseDouble(str);
				break;
			case '-':
				if (terms == 1){
					if (stack.top().contentEquals(")"))
						value =  -Double.parseDouble(str);
					else
						value = Double.parseDouble(str);
				}
				else{
					value -= Double.parseDouble(str);
				}
				break;
			case '/':
				if (terms == 1){
					if (stack.top().contentEquals(")"))
						value = 1 / Double.parseDouble(str);
					else
						value = Double.parseDouble(str);
				}
				else{
					value /= Double.parseDouble(str);
				}
				break;
			}
		}
		return 0.0;
	}
	
	/*
	 * for whatever reason sometimes it is desired to empty the stack and start over
	 * this method does just that
	 */
	public void cleanStack(){
		while (stack.size() > 0){
			stack.pop();
		}
	}
}import java.io.*;
/*
 * Student: Jeremy Mah
 * ID: 10053908
 * Class: 331
 * assignment 2
 * Instructor: Mike Jacobson
 * TA: Eduard Pelchat
 * tut: M/W 11am
 */

/*
 * driver class for assignement 2. takes the command line args only. returns none
 */
public class A2Q5 {
	
	/**
	 *  Prints a message describing proper usage with respect to required
	 *  command line parameters and exits.
	 */
	private static void usage() {
				System.out.println("invalid inputs. Usage: A2Q5 <type> <filename>");
				System.exit(1);
		}
		/*
		 * Student: Jeremy Mah
		 * ID: 10053908
		 * Class: 331
		 * assignment 2
		 * Instructor: Mike Jacobson
		 * TA: Eduard Pelchat
		 * tut: M/W 11am
		 */
/**
 * examines arguments, reads from file line-by-line and creates a new instance of A2Q5b to evaluate each line.
 * handles it's own file errors and exceptions thrown by other classes
 * @param args
 */
	public static void main(String args[]){
		A2Q5b lispExpression = null;
		double result = 0.0;
		if (args.length != 2){
			usage();
			System.exit(1);
		}
		
		int type = Integer.parseInt(args[0]);
		String fileName = args[1];

		try
		{
		       FileReader fr = new FileReader(fileName);
		       BufferedReader br = new BufferedReader(fr);
		       String temp = br.readLine ();
		       while (temp != null)
		       {
		    	   try{
		    	   lispExpression = new A2Q5b();
		    	   result = lispExpression.startExpression(type, temp);
		    	   System.out.println(result);
		    	   }catch(Exception e){
		    		   System.out.println("Invalid Expression");
		    	   }
		    	   if (lispExpression!=null)
		    		   lispExpression.cleanStack();
		    	   temp = br.readLine ();
		       }
		}catch(Exception e){
			System.out.println("Invalid Expression");
		}
	}
}
import org.junit.*;
import static org.junit.Assert.*;
/*
 * Student: Jeremy Mah
 * ID: 10053908
 * Class: 331
 * assignment 2
 * Instructor: Mike Jacobson
 * TA: Eduard Pelchat
 * tut: M/W 11am
 */


/*junit tests for assignment 2
 * 
 * these tests are quite complete because the algorithm used to evaluate the expressions is recursive,
 * and since every smaller case is considered, any combination of these cases will yield the same result
 * 
 */
public class A2Q6 {
	private A2Q5b stackA;
	private A2Q5b stackL;
	private final int ARRAY = 0;
	private final int LL = 1;
	
	@Before
	public void init() {
	stackA = new A2Q5b();
	stackL = new A2Q5b();
	}
	/**
	 * begin black box tests for assignment 2 question 5.
	 * note: all methods to be tested are in A2Q5b, as A2Q5 is just the driver that takes command line args
	 */
	
	
	/**
	 * test case 1: tests empty string as the expression
	 * expected: InvalidExpressionException
	 * purpose: to test is empty expressions are real expessions
	 */
	
 @Test (expected = InvalidExpressionException.class)
 public void testNullA(){
    String expression = "";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	stackA.startExpression(ARRAY, expression);
 }
 @Test (expected = InvalidExpressionException.class)
 public void testNullL(){
     String expression = "";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
 }
 
 /*
  * test case 2: tests expression with only brackets
  * Expected: 0.0
  * purpose: the next closest thing to nothing is nothing wrapped up like a gift
  * 
  * note: could not find whether this was a valid expression, so i assumed that it IS and evaluates to zero.
  * it would be an easy fix to change it to an invalid expression
  */
 @Test
 public void emptyExpressionA(){
	String expression = "()";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	assertEquals(0.0, stackA.startExpression(ARRAY, expression), 1e-16);
 }
 @Test
 public void emptyExpressionL(){
     String expression = "()";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	assertEquals(0.0, stackL.startExpression(LL, expression), 1e-16);
 }
 
 
 /*
  * test case 3: minimal operands, + and *
  * expected: 0.0 for + and 1.0 for *
  */
 @Test
 public void minimalExpressionPlusA(){
	String expression = "(+)";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	assertEquals(0.0, stackA.startExpression(LL, expression), 1e-16);
 }
 @Test
 public void minimalExpressionPlusL(){
     String expression = "(+)";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	assertEquals(0.0, stackL.startExpression(LL, expression), 1e-16);
}

 @Test
 public void minimalExpressionMulA(){
	String expression = "(*)";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	assertEquals(1.0, stackA.startExpression(LL, expression), 1e-16);
 }
 @Test
 public void minimalExpressionMulL(){
     String expression = "(*)";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	assertEquals(1.0, stackL.startExpression(LL, expression), 1e-16);
}
 
 
 /*
  * test case 4: illegal size for operators - and /
  * expected: InvalidExpressionException
  * purpose: these operators require at least one operand. This tests that.
  * 
  */
 @Test (expected = InvalidExpressionException.class)
 public void illegalExpressionSubA(){
	String expression = "(-)";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	stackA.startExpression(ARRAY, expression);
 }
 @Test (expected = InvalidExpressionException.class)
 public void illegalExpressionSubL(){
     String expression = "(-)";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
}

 @Test (expected = InvalidExpressionException.class)
 public void illegalExpressionDivA(){
	String expression = "(/)";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	stackA.startExpression(ARRAY, expression);
 }
 @Test (expected = InvalidExpressionException.class)
 public void illegalExpressionDivL(){
     String expression = "(/)";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
}
 
 
 /*
  * test case 5: minimal operands for - and /
  * expected: -5 and 0.2
  * purpose: test the lower bound of what is required for these operators
  * 
  */
 @Test
 public void minimalExpressionSubA(){
	String expression = "(- 5)";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	assertEquals(-5.0, stackA.startExpression(ARRAY, expression), 1e-16);
 }
 @Test
 public void minimalExpressionSubL(){
     String expression = "(- 5)";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	assertEquals(-5.0, stackL.startExpression(LL, expression), 1e-16);
}

 @Test
 public void minimalExpressionDivA(){
	String expression = "(/ 5)";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	assertEquals(0.2, stackA.startExpression(ARRAY, expression), 1e-16);
 }
 @Test
 public void minimalExpressionDivL(){
     String expression = "(/ 5)";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	assertEquals(0.2, stackL.startExpression(LL, expression), 1e-16);
}
 
 /*
  * test case 6: typical cases with nested expressions
  * Expected: 3.1415926534674368 and 16.5 respectively
  * purpose: test codes ability to evaluate robust expressions with many combinations
  * 
  */
@Test
 public void typicalA1(){
	 String expression ="(+ 3 (/ (+ 7 (/ (+ 9 6 (/ (+ 1 (/ (+ (* 4 (+ 1 (* 8 9))) (/ (+ 1 1)))))))))))";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	assertEquals(3.1415926534674368, stackA.startExpression(ARRAY, expression), 1e-16);
 }
@Test
public void typicalL1(){
	 String expression ="(+ 3 (/ (+ 7 (/ (+ 9 6 (/ (+ 1 (/ (+ (* 4 (+ 1 (* 8 9))) (/ (+ 1 1)))))))))))";
	System.out.println("\nTesting evalute(String) with: type=linkedList, string= " + "'"+expression+"'");
	assertEquals(3.1415926534674368, stackL.startExpression(LL, expression), 1e-16);
}
@Test
public void typicalA2(){
	 String expression ="(+ (- 6) (* 2 3 4) (/ (+ 3) (*) (- 2 3 1 )))";
	System.out.println("\nTesting evalute(String) with: type=array, string= " + "'"+expression+"'");
	assertEquals(16.5, stackA.startExpression(ARRAY, expression), 1e-16);
}
@Test
public void typicalL2(){
	 String expression ="(+ (- 6) (* 2 3 4) (/ (+ 3) (*) (- 2 3 1 )))";
	System.out.println("\nTesting evalute(String) with: type=LL, string= " + "'"+expression+"'");
	assertEquals(16.5, stackL.startExpression(LL, expression), 1e-16);
}

/*
 * test case 7: invalid consecutive operands
 * Expected: InvalidExpressionException
 * purpose: ensure that an operator doesn't try to operate on another operator
 */
@Test (expected = InvalidExpressionException.class)
public void invalidOperandsA(){
	String expression = "(+ - 3345)";
	System.out.println("\nTesting evaluate() with: type=array, string= " + "'"+expression+"'");
	stackA.startExpression(ARRAY, expression);
}
@Test (expected = InvalidExpressionException.class)
public void invalidOperandsL(){
	String expression = "(+ - 3345)";
	System.out.println("\nTesting evaluate() with: type=linkedList, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
}

/*
 * test case 8: arbitrary and negative integers
 * Expected: -10000.0 and -88888 respectively
 * purpose: this functionality was added in. so best make sure it works
 */
@Test
public void arbitraryIntsA1(){
	String expression = "(+ -5666 -4334)";
	System.out.println("\nTesting evaluate() with: type=array, string= " + "'"+expression+"'");
	assertEquals(-10000.0, stackA.startExpression(ARRAY,expression), 1e-16);
}
@Test
public void arbitraryIntsL1(){
	String expression = "(+ -5666 -4334)";
	System.out.println("\nTesting evaluate() with: type=linkedList, string= " + "'"+expression+"'");
	assertEquals(-10000.0, stackL.startExpression(LL,expression), 1e-16);
}
@Test
public void arbitraryIntsA2(){
	String expression = "(- -99999 -11111)";
	System.out.println("\nTesting evaluate() with: type=array, string= " + "'"+expression+"'");
	assertEquals(-88888.0, stackA.startExpression(ARRAY,expression), 1e-16);
}
@Test
public void arbitraryIntsL2(){
	String expression = "(- -99999 -11111)";
	System.out.println("\nTesting evaluate() with: type=linkedList, string= " + "'"+expression+"'");
	assertEquals(-88888.0, stackL.startExpression(LL,expression), 1e-16);
}

/*
 * test case 9: if operands come after numbers
 * expected: InvalidExpressionException
 * purpose: see what would happen if an operator came after a number. similar to consecutive operands
 * in that it doesn't want to see operators try to operate on other operators
 */
@Test (expected = InvalidExpressionException.class)
public void illegalOrderA(){
	String expression = "(+ -5666 -4334+)";
	System.out.println("\nTesting evaluate() with: type=array, string= " + "'"+expression+"'");
	stackA.startExpression(ARRAY, expression);
}
@Test (expected = InvalidExpressionException.class)
public void illegalOrderL(){
	String expression = "(+ -5666 -4334+)";
	System.out.println("\nTesting evalute(LL) with: type=linkedList, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
}

/*
 * test case 10: mismatched brackets
 * expected: InvalidExpressionException
 * purpose: dealing with computers, expressions should be concrete and brackets MUST be matched
 * 
 */
@Test (expected = InvalidExpressionException.class)
public void illegalBracketsA1(){
	String expression = "((+ 3 3))))";
	System.out.println("\nTesting evaluate() with: type=array, string= " + "'"+expression+"'");
	stackA.startExpression(ARRAY, expression);
}
@Test (expected = InvalidExpressionException.class)
public void illegalBracketsL1(){
	String expression = "((+ 3 3))))";
	System.out.println("\nTesting evaluate() with: type=LL, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
}

@Test (expected = InvalidExpressionException.class)
public void illegalBracketsA2(){
	String expression = "(+ 3(+ 3(+3))";
	System.out.println("\nTesting evaluate() with: type=array, string= " + "'"+expression+"'");
	stackA.startExpression(ARRAY, expression);
}
@Test (expected = InvalidExpressionException.class)
public void illegalBracketsL2(){
	String expression = "(+ 3(+ 3(+3))";
	System.out.println("\nTesting evaluate() with: type=LL, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
}

/*
 * tests to see what would happen with a normal everyday math expression where number comes first
 * expected: InvalidExpressionException
 * purpose: likely to happen, a person will input an expression with normal language, and lisp should not accept
 */
@Test (expected = InvalidExpressionException.class)
public void nonLispA(){
	String expression = "(4 + 5)";
	System.out.println("\nTesting evaluate() with: type=array, string= " + "'"+expression+"'");
	assertEquals(9.0, stackA.startExpression(ARRAY,expression), 1e-16);
}@Test (expected = InvalidExpressionException.class)
public void nonLispL(){
	String expression = "(4 + 5)";
	System.out.println("\nTesting evaluate() with: type=LL, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
}

/*
 * test expressions that are too large for the bounded stack
 * expected: FullStackException (this will vary depending on capacity, may have
 * a stack large enough to hold this and it wont throw, as this is >100 elements but not infinite)
 * purpose: make sure we don't push more than the stack can hold, and with some machines/languages, keep security
 */
@Test (expected = FullStackException.class)
public void fullStackA(){
String expression = "(+ 1 1 1 1 1 1 1  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
	System.out.println("\nTesting evaluate() with: type=LL, string= " + "'"+expression+"'");
	stackA.startExpression(ARRAY, expression);
}
@Test (expected = FullStackException.class)
public void fullStackL(){
String expression = "(+ 1 1 1 1 1 1 1  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
	System.out.println("\nTesting evaluate() with: type=LL, string= " + "'"+expression+"'");
	stackL.startExpression(LL, expression);
}
}
/**
 * Interface for question two.
 * @author Jeremy mah
 * @param <T>
 *
 */
public interface BoundedStack<T> extends cpsc331Stack<T>{
	/**
	 * @returns the size of the stack. ie. set elements in the array.
	 */
	public int size();
	
	/**
	 * @returns the maximum size of the stack. ie. size of the array.
	 */
	public int capacity();
	
	/**
	 * checks to see whether the size==capacity.
	 * @returns true if size==capacity, false otherwise.
	 */
	public boolean isFull();
	
	/**
	 * Pushes the object x onto the top of the stack.
	 *
	 * @param x object to be pushed onto the stack.
	 * @throws FullStackException if the stack is full.
	 */
	public void push(T x);
}
/**
 * The cpsc331Stack interface represents the Stack ADT as described
 * in the CPSC 331 lectures during the Winter 2007 term.
 *
 * @author  Mike Jacobson
 * @version 1.0, Oct 6, 2008
 */
public interface cpsc331Stack<T> {

    /**
     * Tests whether the stack is empty.
     *
     * @return true if the stack is empty, false otherwise
     */
    public boolean isEmpty();

    /**
     * Pushes the object x onto the top of the stack.
     *
     * @param x object to be pushed onto the stack.
     */
    public void push(T x);

    /**
     * Returns the object at the top of the stack.
     *
     * @return reference to the item at the top of the stack
     * @throws EmptyStackException if the stack is empty
     */
    public T top();

    /**
     * Removes and returns the object at the top of the stack.
     *
     * @return reference to the item at the top of the stack
     * @throws EmptyStackException if the stack is empty
     */
    public T pop();
}

public class FullStackException extends RuntimeException{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	  /**
	  * Constructs a FullStackException with the
	  * specified message.
	  *
	  * @param message The message
	  */
	  FullStackException(String message) {
	    super(message);
	  }
	  
}
/*
 * /*
 * Student: Jeremy Mah
 * ID: 10053908
 * Class: 331
 * assignment 2
 * Instructor: Mike Jacobson
 * TA: Eduard Pelchat
 * tut: M/W 11am
 */


/*new exception class for assignment2
 */
public class InvalidExpressionException extends RuntimeException{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	  /**
	  *
	  * @param message The message
	  */
	  InvalidExpressionException(String Message) {
	    super(Message);
	  }
	  
}

public class ListNode {
	private String data;
	private ListNode nextNode;
	
	public ListNode (String c){
		data = c;
		nextNode = null;
	}

	public String getData(){
		return data;
	}
	
	public void setNext(ListNode T){
		nextNode = T;
	}
	
	public ListNode getNext(){
		return nextNode;
	}
}
/*
 * Student: Jeremy Mah
 * ID: 10053908
 * Class: 331
 * assignment 2
 * Instructor: Mike Jacobson
 * TA: Eduard Pelchat
 * tut: M/W 11am
 */


//simple debugging class for assignment2. if tags = true, debugging messages are printed during execution
public class Mode {
	public static boolean debugStack = false;
	public static boolean debugEval = false;
}
